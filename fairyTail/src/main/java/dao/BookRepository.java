package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import domain.model.Book;

public class BookRepository extends BaseRepository {
	private String insertSql = "INSERT INTO book(name, author,dateOfReleased,publisher,pageCount) VALUES (?,?,?,?,?)";
	private String selectByIdSql = "SELECT * FROM book WHERE id=?";
	private String deleteSql = "DELETE FROM book WHERE id=?";
	private String getAllSql = "SELECT * FROM book";
	
	PreparedStatement insert;
	PreparedStatement selectById;
	PreparedStatement delete;
	PreparedStatement getAll;
	
	public BookRepository(Connection connection) {
		super(connection);
		try {
			insert = connection.prepareStatement(insertSql);
			selectById = connection.prepareStatement(selectByIdSql);
			delete = connection.prepareStatement(deleteSql);
			getAll = connection.prepareStatement(getAllSql);

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Book get(int bookId){
		try{
			selectById.setInt(1, bookId);
			ResultSet rs = selectById.executeQuery();
			while(rs.next()){
				Book result = new Book();
				result.setId(rs.getInt("id"));
				result.setName(rs.getString("name"));
				result.setAuthor(rs.getString("author"));
				result.setDateOfReleased(rs.getDate("dateOfReleased"));
				result.setPublisher(rs.getString("publisher"));
				result.setPageCount(rs.getInt("pageCount"));
				return result;
			}
		}
		catch(SQLException ex){
			ex.printStackTrace();
		}
		return null;
		
	}
	
	public void add(Book book) {
		try {
			insert.setString(1, book.getName());
			insert.setString(2, book.getAuthor());
			insert.setDate(3, book.getDateOfReleased());
			insert.setString(4, book.getPublisher());
			insert.setInt(5, book.getPageCount());
			insert.executeUpdate();
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
	}

	public void delete(int bookId)
	{
		try {
			delete.setInt(1, bookId);
			delete.executeQuery();
		}
		catch(SQLException e)
		{
			e.printStackTrace();
		}
	}
	
	
	@Override
	protected String createTableSql() {
		return "" + "CREATE TABLE book("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
				+ "name varchar(20)," + "author varchar(50)"  
				+ "dateOfReleased DATE," + "publisher varchar(15),"
				+ "pageCount int"+")";
	}

	@Override
	protected String tableName() {
		return "book";
	}

	
	
}
