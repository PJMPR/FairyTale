package dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import dao.mappers.IMapResultSetIntoEntity;
import dao.repositories.ILendRepository;
import dao.uow.IUnitOfWork;
import domain.model.Lend;

public class LendRepository extends BaseRepository<Lend> implements ILendRepository{

	
	PreparedStatement getReader;
	PreparedStatement getBook;
	protected LendRepository(Connection connection, IMapResultSetIntoEntity<Lend> mapper,IUnitOfWork uow) {
		super(connection, mapper,uow);
		try{
		getReader = connection.prepareStatement(getReaderSql());
		getBook = connection.prepareStatement(getBookSql());
		}
		catch(SQLException e)
		{
			e.printStackTrace();
		}
	}

	@Override
	protected String insertSql() {
		return "INSERT INTO lend(BOOK_ID,READER_ID,dateOfLend,dateOfRegive) VALUES (?,?,?,?)";
	}

	@Override
	protected String updateSql() {
		return "UPDATE lend SET (BOOK_ID,READER_ID,dateOfLend,dateOfRegive)=(?,?,?,?) WHERE id=?";
	}

	@Override
	protected String createTableSql() {
		return "" + "CREATE TABLE lend("
				+"id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
				+"BOOK_ID int," + "READER_ID int," + "dateOfLend DATE," + "dateOfRegive DATE," 
				+ "FOREIGN KEY (READER_ID) REFERENCES reader(id)," + "FOREIGN KEY (BOOK_ID) REFERENCES book(id)" + ")";
	}
	
	protected String getReaderSql()
	{
		return "SELECT * FROM lend WHERE READER_ID = ?";
	}
	
	protected String getBookSql()
	{
		return "SELECT * FROM lend WHERE BOOK_ID = ?";
	}

	@Override
	protected String tableName() {
		return "lend";
	}

	@Override
	protected void setUpdate(Lend entity) throws SQLException {
          update.setInt(1, entity.getBook().getId());
          update.setInt(2, entity.getReader().getId());
          update.setDate(3, (Date) entity.getDateOfLend());
          update.setDate(4, (Date)entity.getDateOfRegive());
	}

	@Override
	protected void setInsert(Lend entity) throws SQLException {
		 insert.setInt(1, entity.getBook().getId());
         insert.setInt(2, entity.getReader().getId());
         insert.setDate(3, (Date) entity.getDateOfLend());
         insert.setDate(4, (Date)entity.getDateOfRegive());
		
	}

	public List<Lend> fromReader(int reader) {
		List<Lend> result = new ArrayList<Lend>();
		try {
			getReader.setInt(1, reader);
			ResultSet rs = getReader.executeQuery();
			while (rs.next()) {
				result.add(mapper.map(rs));
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		return result;
	}

	public List<Lend> fromBook(int book) {
		List<Lend> result = new ArrayList<Lend>();
		try {
			getBook.setInt(1, book);
			ResultSet rs = getBook.executeQuery();
			while (rs.next()) {
				result.add(mapper.map(rs));
			}
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
		return result;
	}


	
}
